# Async Group Copy Extension for DPC++: SYCL_EXT_ONEAPI_ASYNC_GROUP_COPY
:source-highlighter: coderay
:coderay-linenums-mode: table
:dpcpp: pass:[DPC++]

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en

:blank: pass:[ +]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}


== Notice

Copyright (c) 2021-2021 Intel Corporation.  All rights reserved.

IMPORTANT: This specification is a draft.

NOTE: The APIs described in this specification are experimental. Future versions of this extension may change these APIs in ways that are incompatible with the versions described here.

NOTE: Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are
trademarks of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc.
used by permission by Khronos.

This extension is written against the SYCL 2020 revision 4 specification.  All
references below to the "core SYCL specification" or to section numbers in the
SYCL specification refer to that revision.

## Contributors

* Gordon Brown
* Tadej Ciglaric
* Jack Kirk
* Finlay Marno

## Introduction

This document proposes `async_group_copy`, which will generalize
`async_work_group_copy` to work with sub-groups as well as work-groups.
A `wait_for` function will also be also be added to block until the memory
copy is complete and to ensure memory consistency for the group, this will use
the same groups as `async_group_copy`.

## Feature test macro

This extension provides a feature-test macro as described in the core SYCL
specification section 6.3.3 "Feature test macros". Therefore, an implementation
supporting this extension must predefine the macro
SYCL_EXT_ONEAPI_ASYNC_GROUP_COPY to one of the values defined in the table
below. Applications can test for the existence of this macro to determine if the
implementation supports this feature, or applications can test the macro’s value
to determine which of the extension’s APIs the implementation supports.

[%header,cols="1,5"]
|===
|Value |Description
|1     |Initial extension implementation.
|===


## New `async_group_copy` function.
`async_group_copy` will work very similarly to `async_work_group_copy`, but
with the ability to utilize individual sub-groups. The group will be provided
as a template parameter, in the same fashion as `group_barrier`.
`async_group_copy` is intended as a potential optimization, and may add more
overhead than a simple synchronous implementation in some cases.

`async_group_copy` will asynchronously copy a given number of values of type
`dataT` from global memory to local memory or from local memory to global
memory. If an asynchronous copy is not supported then `async_group_copy` will
fall back on a synchronous copy.

`async_group_copy` will return an `async_copy_event` that can be used with `wait_for`
to block until the copy has completed.

When copying from global memory to local memory an optional stride, `src_stride`,
can be provided. For 0 <= i < `count`, the value copied to dest[i] will be
src[i*`src_stride`]. 

When copying from local memory to global memory an optional stride, `dest_stride`,
can be provided. For 0 <= i < `count`, the value located at src[i] will be
copied to dest[i*`dest_stride`]. 

`async_group_copy` is a free function with the
following properties:

* The work-items will not necessarily be synchronized, so must have a
  consistent view of the memory before the invocation.
* The order of operations is implementation defined.
* The method of copy is implementation defined.
* All work-items of the group are required to call the function with the same
  arguments, otherwise the behaviour is undefined.
* All work-items of the group are required to call the function in convergent
  control flow, otherwise the behaviour is undefined.
* The type of `dataT` must be trivially copyable as defined by the C++ core language.
* The copy is only guaranteed to be complete after `wait_for` has been called on the
  returned `async_copy_event` and has completed.
* `src_stride` and `dst_stride` must be non-zero `size_t` values.
* The default value for `src_stride` and `dest_stride` is 1.
* The number of work-items in the group does not need to be equal to `count`.

The structs `dest_stride` and `src_stride` have been introduced to reduce errors
when specifying the stride.

NOTE: The order of the destination and source arguments differs from the SYCL
1.2.1 `async_work_group_copy` function to be more in line with other copy
functions in SYCL 2020.

```c++
namespace sycl::ext::oneapi::experimental {

template <typename Group, std::enable_if_t<sycl::is_group<Group>::value, bool> = true>
class async_copy_event {
private:
  ...
public:
    using group = Group;
};

struct dest_stride {
       std::size_t value;
};

struct src_stride {
       std::size_t value;
};

template <typename Group, typename dataT>
async_copy_event<Group> async_group_copy(Group group, sycl::decorated_local_ptr<dataT> src, sycl::decorated_global_ptr<dataT> dest, size_t count);

template <typename Group, typename dataT>
async_copy_event<Group> async_group_copy(Group group, sycl::decorated_global_ptr<dataT> src, sycl::decorated_local_ptr<dataT> dest, size_t count);

template <typename Group, typename dataT>
async_copy_event<Group> async_group_copy(Group group, sycl::decorated_local_ptr<dataT> src, sycl::decorated_global_ptr<dataT> dest, size_t count, dest_stride destStride);

template <typename Group, typename dataT>
async_copy_event<Group> async_group_copy(Group group, sycl::decorated_global_ptr<dataT> src, sycl::decorated_local_ptr<dataT> dest, size_t count, src_stride srcStride);
} // namespace sycl::ext::oneapi::experimental
```

## New `wait_for` function
`wait_for` will work very similarly to `nd_item::wait_for` or `group::wait_for`,
but with the ability to utilize individual sub-groups. The group will be linked
to the `async_copy_event` so `wait_for` and `async_group_copy` use the same group.

`wait_for` will block until all the asychronous copies represented by the
`async_copy_event` arguments are complete. Copies performed with `async_group_copy`
are not guaranteed to be complete until `wait_for` has been called with the returned
`async_copy_event`, so the data cannot be read reliably before that. `wait_for` will also act
as a group barrier to ensure memory consistency between the work-items of the group.

`wait_for` is a free function with the following properties:

* All work-items of the group are required to call the function in convergent
  control flow, otherwise the behaviour is undefined.
* All instances of `eventTN` are of template type `async_copy_event` with the same specialization.


```c++
namespace sycl::ext::oneapi::experimental {
template <typename group, typename... eventTN>
std::enable_if_t<(std::is_same_v<eventTN,async_copy_event<group>> && ...)> wait_for(eventTN... Events);
}  // namespace sycl
```

## Revision History

[frame="none",options="header"]
|======================
|Rev |Date       |Author        |Changes
|1   |2021-11-08 |Finlay Marno  |Initial working draft.
|======================
